#########################################################################
# Title:         Settings: Settings Updater                             #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Settings Updater | Cloudbox Settings Updater Block
  block:

  # Check for and import settings files.
  - name: "Settings Updater | Check if '{{ item }}' exists"
    stat:
      path: "{{ playbook_dir }}/{{ item }}"
    register: file0

  - name: "Copy '{{ item }}.default' to '{{ item }}'"
    copy:
      src: "{{ playbook_dir }}/defaults/{{ item }}.default"
      dest: "{{ playbook_dir }}/{{ item }}"
      owner: "{{ cloudbox_yml.stat.uid }}"
      group: "{{ cloudbox_yml.stat.gid }}"
      mode: 0664
      force: yes
    when: not file0.stat.exists

  # Decryption Tasks
  - name: Settings Updater | Decryption Block
    block:

    - name: "Settings Updater | Check '{{ item }}' for encryption"
      shell: "head -1 {{ playbook_dir }}/{{ item }} | grep -q \\$ANSIBLE_VAULT"
      register: encryption_check
      ignore_errors: yes
      failed_when: encryption_check.rc > 1

    - name: "Settings Updater | Set 'file_is_encrypted' variable"
      set_fact:
        file_is_encrypted: "{{ ((encryption_check.rc == 0) | default(false,true)) }}"

    - name: "Settings Updater | Decrypt '{{ item }}' when encrypted"
      shell: "ansible-vault decrypt {{ playbook_dir }}/{{ item }}"
      become: yes
      become_user: "{{ cloudbox_yml.stat.pw_name }}"
      when: file_is_encrypted

    when: file0.stat.exists

  # settings-updater.py tasks
  - name: "Settings Updater | Check if 'settings-updater.log' exists"
    stat:
      path: "{{ playbook_dir }}/settings-updater.log"
    register: settings_updater_log

  - name: "Settings Updater | Reset ownership of 'settings-updater.log'"
    file:
      path: "{{ playbook_dir }}/settings-updater.log"
      state: file
      owner: "{{ cloudbox_yml.stat.uid }}"
      group: "{{ cloudbox_yml.stat.gid }}"
      mode: 0664
    when: (settings_updater_log.stat.exists)

  - name: "Settings Updater | Run 'settings-updater.py' for '{{ item }}'"
    script: "'roles/settings/files/settings-updater.py' '{{ playbook_dir }}' 'defaults/{{ item }}.default' '{{ item }}'"
    become: yes
    become_user: "{{ cloudbox_yml.stat.pw_name }}"
    register: settings_updater
    ignore_errors: yes
    failed_when: settings_updater.rc == 1

  - name: Settings Updater | Build 'files_updated_successfully' list
    set_fact:
      files_updated_successfully: "{{ files_updated_successfully }} + [ '{{ item }}' ]"
    when: settings_updater.rc == 2

  - name: Settings Updater | Build 'files_updated_unsuccessfully' list
    set_fact:
      files_updated_unsuccessfully: "{{ files_updated_unsuccessfully }} + [ '{{ item }}' ]"
    when: settings_updater.rc == 1

  - name: Settings Updater | Set 'exit_is_necessary' variable
    set_fact:
      exit_is_necessary: true
    when: (settings_updater.rc == 2) or (settings_updater.rc == 1)

  always:
  - name: "Settings Updater | Re-encrypt '{{ item }}' if previously encrypted"
    shell: "ansible-vault encrypt {{ playbook_dir }}/{{ item }}"
    become: yes
    become_user: "{{ cloudbox_yml.stat.pw_name }}"
    when: file0.stat.exists and file_is_encrypted
